# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Player {
  #firstName lastName
  name: String!
  #playerID of NBA stats
  playerID: Int! #TODO: make ID's consistently a string or int
  seasons: [String!]!
  #G, F, or C
  position: String!
  currentTeam: Team!
}

type Team {
  name: String!
  teamID: Int!
  abbreviation: String!
  location: String!
  numWins: Int! #TODO
  numLoss: Int! #TODO
}

type TeamGame {
	date: String!
	defensive_rating: Float!
	defensive_rebound_percentage: Float!
	field_goal_percentage: Float!
	field_goals_attempted: Int!
	gameID: String! #should be Int
	home_or_away: String!
	offensive_rebound_percentage: Float!
	opponent: Team!
	opponent_assists: Int!
	opponent_effective_field_goal_percentage: Float!
	opponent_field_goals_attempted: Int!
	opponent_free_throws_attempted: Int!
	opponent_points: Int!
	opponent_rebounds: Int!
	opponent_three_pointers_attempted: Int!
	opponent_three_pointers_made: Int!
	plus_minus_per_hundred: Float!
	possessions: Int!
	personal_fouls: Int!
	personal_fouls_drawn: Int!
	season: String!
	win_or_loss: String!
}

type Query {
  players: [Player!]!
  filterPlayers(input: PlayerFilter!): [Player!]!
  player(input: PlayerFilter!): Player!
  teams: [Team!]!
  filterTeams(input: TeamFilter!): [Team!]!
  team(input: TeamFilter!): Team!
  teamGames(input: GameFilter!): [TeamGame!]!
}

input PlayerFilter {
  name: String
  playerID: Int
  season: String
  position: String
  teamABR: String
}

input TeamFilter {
  name: String
  teamID: Int
  abbreviation: String
}

input GameFilter {
  teamID: Int
  playerID: Int
  season: String
}
