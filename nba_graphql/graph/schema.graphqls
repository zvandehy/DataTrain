type Query {
  players(input: PlayerFilter): [Player!]!
  teams(input: TeamFilter!): [Team!]!
  # projections(input: ProjectionFilter!): [Projection!]!
}

enum Stat {
  Points
  Assists
  Rebounds
  Steals
  Blocks
  ThreePointersMade
  ThreePointersAttempted
  ThreePointPercentage
  FreeThrowsMade
  FreeThrowsAttempted
  FreeThrowsPercentage
  FieldGoalsMade
  FieldGoalsAttempted
  FieldGoalPercentage
  EffectiveFieldGoalPercentage
  TrueShootingPercentage
  Minutes
  OffensiveRebounds
  DefensiveRebounds
  AssistPercentage
  OffensiveReboundPercentage
  DefensiveReboundPercentage
  Usage
  Turnovers
  PersonalFouls
  PersonalFoulsDrawn
  PointsReboundsAssists
  PointsRebounds
  PointsAssists
  ReboundsAssists
  BlocksSteals
  FantasyScore
  GamesPlayed
  Height
  Weight
}

input ProjectionFilter {
  period: Period!
  propositionFilter: PropositionFilter
}

input PropositionFilter {
  sportsbook: SportsbookOption
  propositionType: Stat # TODO: Limit to only stats that make sense
}

enum SportsbookOption {
  PrizePicks
  UnderdogFantasy
}

input PlayerFilter {
  name: String
  playerID: Int
  seasons: [SeasonOption!]
  positionStrict: Position
  positionStrictMatch: Boolean
  positionLoose: Position
  positionLooseMatch: Boolean
  teamABR: String
  teamID: Int
  startDate: String
  endDate: String
  statFilters: [StatFilter!]
  withPropositions: ProjectionFilter
}

enum SeasonOption {
  SEASON_2022_23
  SEASON_2021_22
  SEASON_2020_21
}

input StatFilter {
  period: Period
  stat: Stat!
  mode: StatMode!
  operator: Operator!
  value: Float!
}

input Period {
  startDate: String
  endDate: String
  seasons: [SeasonOption!]
  limit: Int
}

enum StatMode {
  PER_GAME
  PER_36
  PER_MINUTE
  TOTAL
}

enum Operator {
  GT
  GTE
  LT
  LTE
  EQ
  NEQ
}

enum Position {
  G
  F
  C
  G_F
  F_G
  F_C
  C_F
}

input TeamFilter {
  name: String
  teamID: Int
  abbreviation: String
}

input GameFilter {
  teamID: Int
  opponentID: Int
  opponentMatch: Boolean
  playerID: Int
  gameID: String
  # TODO: Replace seasons, dates, and gameType with Period
  seasons: [SeasonOption!]
  startDate: String
  endDate: String
  lastX: Int
  gameType: GameType
  gameTypeMatch: Boolean
  homeOrAway: HomeOrAway
  homeOrAwayMatch: Boolean
  statFilters: [StatFilter!]
}

enum GameType {
  REGULAR_SEASON
  PLAYOFFS
}

enum HomeOrAway {
  HOME
  AWAY
}
