# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Player {
  #firstName lastName
  name: String!
  #playerID of NBA stats
  playerID: Int!
  seasons: [String!]!
  #G, F, or C
  position: String!
  # TODO: change 'currentTeam' to 'team'
  currentTeam: Team!
  games(input: GameFilter!): [PlayerGame!]!
  injuries: [Injury!]
  projections(input: ProjectionFilter!): [Projection!]!
  height: String!
  weight: Int!
  similarPlayers(input: GameFilter!): [Player!]!
}

type Team {
  name: String!
  teamID: Int!
  abbreviation: String!
  location: String!
  numWins: Int! #TODO
  numLoss: Int! #TODO
  games(input: GameFilter!): [TeamGame!]!
  players: [Player!]!
  injuries: [Injury!]
}

type TeamGame {
  date: String!
  margin: Int!
  points: Int!
  assists: Int!
  rebounds: Int!
  offensive_rebounds: Int!
  defensive_rebounds: Int!
  turnovers: Int!
  steals: Int!
  blocks: Int!
  three_pointers_attempted: Int!
  three_pointers_made: Int!
  defensive_rating: Float!
  defensive_rebound_percentage: Float!
  field_goal_percentage: Float!
  field_goals_attempted: Int!
  gameID: String!
  home_or_away: String!
  field_goals_made: Int!
  free_throws_attempted: Int!
  free_throws_made: Int!
  free_throws_percentage: Float!
  offensive_rebound_percentage: Float!
  opponent: Team!
  opponent_assists: Int!
  opponent_effective_field_goal_percentage: Float!
  opponent_field_goals_attempted: Int!
  opponent_free_throws_attempted: Int!
  opponent_points: Int!
  opponent_rebounds: Int!
  opponent_three_pointers_attempted: Int!
  opponent_three_pointers_made: Int!
  plus_minus_per_hundred: Float!
  possessions: Int!
  playoffs: Boolean!
  personal_fouls: Int!
  personal_fouls_drawn: Int!
  season: String!
  win_or_loss: String!
  playersInGame: PlayersInGame!
}

type PlayerGame {
  assist_percentage: Float!
  assists: Int!
  date: String!
  defensive_rebound_percentage: Float!
  defensive_rebounds: Int!
  effective_field_goal_percentage: Float!
  field_goal_percentage: Float!
  field_goals_attempted: Int!
  field_goals_made: Int!
  free_throws_attempted: Int!
  free_throws_made: Int!
  free_throws_percentage: Float!
  gameID: String!
  home_or_away: String!
  win_or_loss: String!
  margin: Int!
  minutes: String!
  offensive_rebound_percentage: Float!
  offensive_rebounds: Int!
  opponent: Team!
  opponentStats: TeamGame!
  team: Team!
  teamStats: TeamGame!
  personal_fouls_drawn: Int!
  personal_fouls: Int!
  points: Int!
  player: Player!
  playoffs: Boolean!
  season: String!
  three_point_percentage: Float!
  three_pointers_attempted: Int!
  three_pointers_made: Int!
  rebounds: Int!
  true_shooting_percentage: Float!
  turnovers: Int!
  usage: Float!
  blocks: Int!
  steals: Int!
  playersInGame: PlayersInGame!
  projections: [Projection]!
}

type Projection {
  player: Player!
  opponent: Team!
  propositions: [Proposition]!
  result: PlayerGame
  startTime: String!
  date: String!
}

type Proposition {
  target: Float!
  type: String!
  # lastModified
  sportsbook: String!
  predictions: [Prediction!]!
  lastModified: String!
}

type Prediction {
  model: String!
  overUnderPrediction: String!
  totalPrediction: Float
}

# add injuries to games
type Injury {
  startDate: String!
  returnDate: String!
  status: String!
  player: Player!
}

type Target {
  target: Float!
  type: String!
}

type PlayersInGame {
  team: [Player!]!
  opponent: [Player!]!
}

type Query {
  players: [Player!]!
  filterPlayers(input: PlayerFilter!): [Player!]!
  player(input: PlayerFilter!): Player!
  teams: [Team!]!
  filterTeams(input: TeamFilter!): [Team!]!
  team(input: TeamFilter!): Team!
  teamGames(input: GameFilter!): [TeamGame!]!
  playerGames(input: GameFilter!): [PlayerGame!]!
  projections(input: ProjectionFilter!): [Projection!]!
}

input ProjectionFilter {
  sportsbook: String
  playerName: String
  playerID: Int
  startDate: String
  endDate: String
  teamID: Int
  opponentID: Int
}

input PlayerFilter {
  name: String
  playerID: Int
  season: String
  position: String
  teamABR: String
  teamID: Int
}

input TeamFilter {
  name: String
  teamID: Int
  abbreviation: String
}

# TODO: Add a date filter
input GameFilter {
  teamID: Int
  playerID: Int
  gameID: String
  season: String
  startDate: String
  endDate: String
}
